// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using clone_dev_to.Data;

#nullable disable

namespace clone_dev_to.Migrations
{
    [DbContext(typeof(BloggerContext))]
    [Migration("20211213042437_SetFkUserID")]
    partial class SetFkUserID
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("clone_dev_to.Models.PostModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("detail");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publication_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("clone_dev_to.Models.TagModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3d9e7a8-3c31-4aed-9984-c65c14ef0795"),
                            CreatedDate = new DateTime(2021, 12, 13, 4, 24, 37, 28, DateTimeKind.Utc).AddTicks(9400),
                            Name = "javascript"
                        },
                        new
                        {
                            Id = new Guid("b3ce1341-d10c-429f-954b-854f55aef90b"),
                            CreatedDate = new DateTime(2021, 12, 13, 4, 24, 37, 28, DateTimeKind.Utc).AddTicks(9410),
                            Name = "webdev"
                        },
                        new
                        {
                            Id = new Guid("d6b1de80-e44e-412e-957e-8a7e64d494f9"),
                            CreatedDate = new DateTime(2021, 12, 13, 4, 24, 37, 28, DateTimeKind.Utc).AddTicks(9410),
                            Name = "beginners"
                        },
                        new
                        {
                            Id = new Guid("daf5829d-25d3-4f36-b7f6-e6c8ba26bcd0"),
                            CreatedDate = new DateTime(2021, 12, 13, 4, 24, 37, 28, DateTimeKind.Utc).AddTicks(9410),
                            Name = "programming"
                        });
                });

            modelBuilder.Entity("clone_dev_to.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("full_name");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("PostModelTagModel", b =>
                {
                    b.Property<Guid>("PostsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("posts_tags", (string)null);
                });

            modelBuilder.Entity("clone_dev_to.Models.PostModel", b =>
                {
                    b.HasOne("clone_dev_to.Models.UserModel", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PostModelTagModel", b =>
                {
                    b.HasOne("clone_dev_to.Models.PostModel", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clone_dev_to.Models.TagModel", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clone_dev_to.Models.UserModel", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
